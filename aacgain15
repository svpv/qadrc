#!/bin/bash -efu
#
# aacgain15 - normalize audio volume to the average of ReplayGain 1.0 and 2.0
#
# Written by Alexey Tourbin.
# This file is distributed as Public Domain.

av0=$(readlink -ev "$0")
av0dir=$(dirname "$av0")

. $av0dir/calc.sh
. $av0dir/dualmono.sh

tmpdir=${TMPDIR:-/tmp}
argc=1
dry_run=
rgfrac=0.5
db0=0

AACGain15()
{
	local ff_decode_pre=
	if [[ $1 = *.[Mm][Pp]3 ]]; then
		ff_decode_pre='-acodec mp3float'
	fi
	ffmpeg $ff_decode_pre -i "$1" -vn -af replaygain,ebur128=framelog=verbose \
		-f null - >$tmpdir/gain$$.log 2>&1 || { grep -i error $tmpdir/gain$$.log; false; }
	local vars
	vars=$($av0dir/aacgain15pp <$tmpdir/gain$$.log)
	local $vars
	if [ ${g0ch:?} = 1 ]; then
		DualMono rg1
		DualMono eb1
	fi
	vars=$(perl -e 'use v5.12;
		my ($prog, $rgfrac, $db0, $db1, $db2, $peak) = @ARGV;
		die "$prog: bad --rg value $rgfrac\n"
			unless $rgfrac > 0 and $rgfrac < 1;
		my $db = $db0 + $rgfrac * $db1 + (1 - $rgfrac) * $db2;
		use POSIX qw(floor);
		my $igain = 0 + sprintf "%.0f", $db / (5 * log(2) / log(10));
		my $igain2db = $igain * (5 * log(2) / log(10));
		my $igaink = $igain;
		my $igaink2db = $igain2db;
		while ($peak + $igaink2db > 0.001) {
			$igaink--;
			$igaink2db = $igaink * (5 * log(2) / log(10));
		}
		my $dbleft  = 0 + sprintf "%.2f", $db - $igain2db;
		my $dbleftk = 0 + sprintf "%.2f", $db - $igaink2db;
		$db = 0 + sprintf "%.2f", $db;
		say "g1db=$db";
		say "g1igain=$igain";
		say "g1igaink=$igaink";
		say "g1dbleft=$dbleft";
		say "g1dbleftk=$dbleftk";
		' -- "${0##*/}" "$rgfrac" "$db0" \
			${rg1gain:?} ${eb1gain:?} ${rg1peak:?})
	local $vars
	if [ -n "$dry_run" ]; then
		[ $argc = 1 ] || echo "$1"
		echo rg1gain=$rg1gain eb1gain=$eb1gain g1db=$g1db \
		     eb1range=$eb1range eb1rlow=$eb1rlow rg1peak=$rg1peak
		local snow='\033[1;37m' red='\033[1;31m' nc='\033[0m'
		[ -t 1 ] || snow= red= nc=
		[ ${g1igain:?} = ${g1igaink:?} ] && red=
		# Can go up, even with clipping restrictions?
		if [ $g1igaink -gt 0 ]; then
		    printf "${red}g1igain=$g1igain$nc ${snow}g1igaink=$g1igaink$nc"
		# Or do they generally suggest we go down?
		# (perhaps not as much as with clipping restrictions)
		elif [ $g1igain -lt 0 ]; then
		    printf "${snow}g1igain=$g1igain$nc ${red}g1igaink=$g1igaink$nc"
		# Otherwise, no good plan (or nothing to do).
		else
		    printf "${red}g1igain=$g1igain g1igaink=$g1igaink$nc"
		fi
		echo '' g1dbleft=$g1dbleft g1dbleftk=$g1dbleftk
	else
		if [ $g1igaink -gt 0 ]; then
		    printf "%s: applying gain %+d to %s\n" "${0##*/}" "$g1igaink" "$1"
		    aacgain -q -g $g1igaink -s s "$1"
		elif [ $g1igain -lt 0 ]; then
		    printf "%s: applying gain %+d to %s\n" "${0##*/}" "$g1igain" "$1"
		    aacgain -q -g $g1igain -s s "$1"
		fi >&2
	fi
	rm $tmpdir/gain$$.log
}

argv=$(getopt -n "${0##*/}" -o n -l rg:,db: -- "$@")
eval set -- "$argv"

while :; do
	case "$1" in
		-n) dry_run=1; shift ;;
		--rg) rgfrac=${2:?}; shift 2 ;;
		--db) db0=${2:?}; shift 2 ;;
		--) shift; break ;;
		*) echo >&2 "unrecognized option: $1"; false ;;
	esac
done

argc=$#
for f; do
	AACGain15 "$f"
done
